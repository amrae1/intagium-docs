"use strict";(self.webpackChunkintagium_docs=self.webpackChunkintagium_docs||[]).push([[657],{2215:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"getting-started/hello-world","title":"Hello World Tutorial","description":"This tutorial demonstrates INTAGIUM\'s core functionality through practical examples. You\'ll learn about the dual address system, basic token operations, and how to interact with INTAGIUM\'s unique features.","source":"@site/docs/getting-started/hello-world.md","sourceDirName":"getting-started","slug":"/getting-started/hello-world","permalink":"/getting-started/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/amrae1/INTAGIUM/tree/main/docs/docs/getting-started/hello-world.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Testnet Setup","permalink":"/getting-started/testnet-setup"},"next":{"title":"Modules Overview","permalink":"/modules/overview"}}');var s=t(4848),i=t(8453);const a={sidebar_position:4},l="Hello World Tutorial",o={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Hello World Transaction Example",id:"hello-world-transaction-example",level:2},{value:"Step 1: Create a Wallet",id:"step-1-create-a-wallet",level:3},{value:"Step 2: Explore the Dual Address System",id:"step-2-explore-the-dual-address-system",level:3},{value:"Step 3: Get Test Tokens",id:"step-3-get-test-tokens",level:3},{value:"Step 4: Send Your First Transaction",id:"step-4-send-your-first-transaction",level:3},{value:"Step 5: Verify the Transaction",id:"step-5-verify-the-transaction",level:3},{value:"Web3 Hello World",id:"web3-hello-world",level:2},{value:"Using Web3.js",id:"using-web3js",level:3},{value:"Using Ethers.js",id:"using-ethersjs",level:3},{value:"Sending Transactions with Web3",id:"sending-transactions-with-web3",level:3},{value:"Module Interaction Examples",id:"module-interaction-examples",level:2},{value:"DRM Module - Register Content",id:"drm-module---register-content",level:3},{value:"DOR Module - Register Asset",id:"dor-module---register-asset",level:3},{value:"Query Module States",id:"query-module-states",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Multi-Signature Transactions",id:"multi-signature-transactions",level:3},{value:"Governance Participation",id:"governance-participation",level:3},{value:"Understanding Transaction Fees",id:"understanding-transaction-fees",level:2},{value:"Error Handling and Debugging",id:"error-handling-and-debugging",level:2},{value:"Common Errors and Solutions",id:"common-errors-and-solutions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Security",id:"security",level:3},{value:"Development",id:"development",level:3},{value:"Address Management",id:"address-management",level:3},{value:"What&#39;s Next?",id:"whats-next",level:2},{value:"Continue Your Journey",id:"continue-your-journey",level:3},{value:"Join the Community",id:"join-the-community",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"hello-world-tutorial",children:"Hello World Tutorial"})}),"\n",(0,s.jsx)(n.p,{children:"This tutorial demonstrates INTAGIUM's core functionality through practical examples. You'll learn about the dual address system, basic token operations, and how to interact with INTAGIUM's unique features."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Before starting, make sure you have:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.a,{href:"/getting-started/testnet-setup",children:"Set up the testnet"})]}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Created a wallet with test tokens"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Basic familiarity with command line operations"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"hello-world-transaction-example",children:"Hello World Transaction Example"}),"\n",(0,s.jsx)(n.p,{children:"Let's start with a simple example that demonstrates the dual address system and basic token transfer functionality."}),"\n",(0,s.jsx)(n.h3,{id:"step-1-create-a-wallet",children:"Step 1: Create a Wallet"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Create a new wallet with INTAGIUM address\r\nintagiumd keys add my-wallet\r\n\r\n# Output example:\r\n# - name: my-wallet\r\n#   type: local\r\n#   address: intag1abc123def456ghi789jkl012mno345pqr678st\r\n#   pubkey: \'{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"A..."}\'\r\n#   mnemonic: "word1 word2 word3 ... word24"\n'})}),"\n",(0,s.jsx)(n.admonition,{title:"Important",type:"warning",children:(0,s.jsx)(n.p,{children:"Save your mnemonic phrase securely! This is the only way to recover your wallet."})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-explore-the-dual-address-system",children:"Step 2: Explore the Dual Address System"}),"\n",(0,s.jsx)(n.p,{children:"INTAGIUM's unique dual address system allows you to use both Cosmos and Ethereum address formats:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Convert to Ethereum-compatible address\r\nintagiumd dual-address convert intag1abc123def456ghi789jkl012mno345pqr678st\r\n\r\n# Output: 0x742d35Cc6634C0532925a3b8D0C9C0E3C5d2B8E1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Both addresses represent the ",(0,s.jsx)(n.strong,{children:"same account"}),"! This means:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You can receive tokens at either address"}),"\n",(0,s.jsx)(n.li,{children:"Balances are identical for both formats"}),"\n",(0,s.jsx)(n.li,{children:"Transactions can use either format interchangeably"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"step-3-get-test-tokens",children:"Step 3: Get Test Tokens"}),"\n",(0,s.jsx)(n.p,{children:"Request tokens from the faucet:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Request tokens from faucet (testnet only)\r\ncurl -X POST "https://faucet.intagium.com/request" \\\r\n  -H "Content-Type: application/json" \\\r\n  -d \'{"address": "intag1abc123def456ghi789jkl012mno345pqr678st", "amount": "1000000"}\'\r\n\r\n# Check balance\r\nintagiumd query bank balance intag1abc123def456ghi789jkl012mno345pqr678st intag\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-send-your-first-transaction",children:"Step 4: Send Your First Transaction"}),"\n",(0,s.jsx)(n.p,{children:"Now let's demonstrate the dual address system in action:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Send tokens using INTAG address\r\nintagiumd tx bank send my-wallet intag1def456ghi789jkl012mno345pqr678stabc123 1000000intag \\\r\n  --chain-id intagium-testnet-1 \\\r\n  --gas auto \\\r\n  --gas-adjustment 1.5 \\\r\n  --fees 5000intag\r\n\r\n# Or send using Ethereum-compatible address (same result!)\r\nintagiumd tx bank send my-wallet 0x8E2B3F4C5D6A7B8C9D0E1F2A3B4C5D6E7F8A9B0C 1000000intag \\\r\n  --chain-id intagium-testnet-1 \\\r\n  --gas auto \\\r\n  --gas-adjustment 1.5 \\\r\n  --fees 5000intag\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-5-verify-the-transaction",children:"Step 5: Verify the Transaction"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Query transaction by hash\r\nintagiumd query tx [TRANSACTION_HASH]\r\n\r\n# Check recipient balance\r\nintagiumd query bank balance intag1def456ghi789jkl012mno345pqr678stabc123 intag\n"})}),"\n",(0,s.jsx)(n.h2,{id:"web3-hello-world",children:"Web3 Hello World"}),"\n",(0,s.jsx)(n.p,{children:"INTAGIUM's dual address system means you can also use familiar Web3 tools:"}),"\n",(0,s.jsx)(n.h3,{id:"using-web3js",children:"Using Web3.js"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const Web3 = require('web3');\r\n\r\n// Connect to INTAGIUM testnet\r\nconst web3 = new Web3('https://web3.testnet.intagium.com');\r\n\r\nasync function helloWorld() {\r\n    console.log('\ud83c\udf1f INTAGIUM Hello World with Web3.js');\r\n    \r\n    // Check connection\r\n    const chainId = await web3.eth.getChainId();\r\n    console.log('Connected to chain ID:', chainId);\r\n    \r\n    // Your wallet address (0x format)\r\n    const address = '0x742d35Cc6634C0532925a3b8D0C9C0E3C5d2B8E1';\r\n    \r\n    // Get balance\r\n    const balance = await web3.eth.getBalance(address);\r\n    console.log('Balance:', web3.utils.fromWei(balance, 'ether'), 'INTAG');\r\n    \r\n    // Get latest block\r\n    const block = await web3.eth.getBlock('latest');\r\n    console.log('Latest block:', block.number);\r\n    \r\n    // Convert to INTAGIUM address format\r\n    console.log('Ethereum format:', address);\r\n    console.log('INTAGIUM format: intag1abc123def456ghi789jkl012mno345pqr678st');\r\n    console.log('Both addresses represent the same account! \ud83c\udf89');\r\n}\r\n\r\nhelloWorld().catch(console.error);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-ethersjs",children:"Using Ethers.js"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const { ethers } = require('ethers');\r\n\r\nasync function helloWorldEthers() {\r\n    console.log('\ud83c\udf1f INTAGIUM Hello World with Ethers.js');\r\n    \r\n    // Connect to INTAGIUM testnet\r\n    const provider = new ethers.JsonRpcProvider('https://web3.testnet.intagium.com');\r\n    \r\n    // Check network\r\n    const network = await provider.getNetwork();\r\n    console.log('Connected to:', network.name, 'Chain ID:', network.chainId);\r\n    \r\n    // Your wallet address\r\n    const address = '0x742d35Cc6634C0532925a3b8D0C9C0E3C5d2B8E1';\r\n    \r\n    // Get balance\r\n    const balance = await provider.getBalance(address);\r\n    console.log('Balance:', ethers.formatEther(balance), 'INTAG');\r\n    \r\n    // Get block number\r\n    const blockNumber = await provider.getBlockNumber();\r\n    console.log('Current block:', blockNumber);\r\n    \r\n    console.log('\u2728 INTAGIUM dual address system works with all Ethereum tools!');\r\n}\r\n\r\nhelloWorldEthers().catch(console.error);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sending-transactions-with-web3",children:"Sending Transactions with Web3"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const { ethers } = require('ethers');\r\n\r\nasync function sendTransaction() {\r\n    const provider = new ethers.JsonRpcProvider('https://web3.testnet.intagium.com');\r\n    \r\n    // Create wallet from private key\r\n    const wallet = new ethers.Wallet('YOUR_PRIVATE_KEY', provider);\r\n    \r\n    console.log('Sending from:', wallet.address);\r\n    \r\n    // Transaction details\r\n    const tx = {\r\n        to: '0x8E2B3F4C5D6A7B8C9D0E1F2A3B4C5D6E7F8A9B0C',\r\n        value: ethers.parseEther('1.0'), // 1 INTAG\r\n        gasLimit: 21000,\r\n        gasPrice: ethers.parseUnits('20', 'gwei')\r\n    };\r\n    \r\n    // Send transaction\r\n    console.log('Sending transaction...');\r\n    const txResponse = await wallet.sendTransaction(tx);\r\n    console.log('Transaction hash:', txResponse.hash);\r\n    \r\n    // Wait for confirmation\r\n    const receipt = await txResponse.wait();\r\n    console.log('\u2705 Transaction confirmed in block:', receipt.blockNumber);\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"module-interaction-examples",children:"Module Interaction Examples"}),"\n",(0,s.jsx)(n.p,{children:"INTAGIUM's modules provide specialized functionality. Here are some basic examples:"}),"\n",(0,s.jsx)(n.h3,{id:"drm-module---register-content",children:"DRM Module - Register Content"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Register digital content\r\nintagiumd tx drm register-content \\\r\n  --creator $(intagiumd keys show my-wallet -a) \\\r\n  --content-hash "sha256:a1b2c3d4e5f6..." \\\r\n  --content-type "image" \\\r\n  --title "My First Digital Asset" \\\r\n  --description "Hello World digital content on INTAGIUM" \\\r\n  --license-type "standard" \\\r\n  --price "1000000intag" \\\r\n  --from my-wallet \\\r\n  --chain-id intagium-testnet-1 \\\r\n  --gas auto \\\r\n  --fees 5000intag\n'})}),"\n",(0,s.jsx)(n.h3,{id:"dor-module---register-asset",children:"DOR Module - Register Asset"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Register a digital asset\r\nintagiumd tx dor register-asset \\\r\n  --owner $(intagiumd keys show my-wallet -a) \\\r\n  --asset-type "nft" \\\r\n  --name "Hello World NFT" \\\r\n  --description "My first asset on INTAGIUM" \\\r\n  --metadata \'{"image":"https://example.com/image.png"}\' \\\r\n  --from my-wallet \\\r\n  --chain-id intagium-testnet-1 \\\r\n  --gas auto \\\r\n  --fees 5000intag\n'})}),"\n",(0,s.jsx)(n.h3,{id:"query-module-states",children:"Query Module States"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Query DRM content\r\nintagiumd query drm content [CONTENT_ID]\r\n\r\n# Query DOR assets by owner\r\nintagiumd query dor assets-by-owner $(intagiumd keys show my-wallet -a)\r\n\r\n# Query account information\r\nintagiumd query auth account $(intagiumd keys show my-wallet -a)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,s.jsx)(n.h3,{id:"multi-signature-transactions",children:"Multi-Signature Transactions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Create a multisig account\r\nintagiumd keys add multisig-account --multisig key1,key2,key3 --multisig-threshold 2\r\n\r\n# Create a transaction file\r\nintagiumd tx bank send multisig-account recipient 1000000intag \\\r\n  --generate-only \\\r\n  --chain-id intagium-testnet-1 > tx.json\r\n\r\n# Sign with first key\r\nintagiumd tx sign tx.json --from key1 --chain-id intagium-testnet-1 > tx-signed-1.json\r\n\r\n# Sign with second key\r\nintagiumd tx sign tx.json --from key2 --chain-id intagium-testnet-1 > tx-signed-2.json\r\n\r\n# Combine signatures and broadcast\r\nintagiumd tx multisign tx.json multisig-account tx-signed-1.json tx-signed-2.json \\\r\n  --chain-id intagium-testnet-1 > tx-multisigned.json\r\n\r\nintagiumd tx broadcast tx-multisigned.json\n"})}),"\n",(0,s.jsx)(n.h3,{id:"governance-participation",children:"Governance Participation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Query active proposals\r\nintagiumd query gov proposals\r\n\r\n# Vote on a proposal\r\nintagiumd tx gov vote 1 yes \\\r\n  --from my-wallet \\\r\n  --chain-id intagium-testnet-1 \\\r\n  --gas auto \\\r\n  --fees 5000intag\r\n\r\n# Submit a new proposal\r\nintagiumd tx gov submit-proposal \\\r\n  --title "Hello World Proposal" \\\r\n  --description "My first governance proposal" \\\r\n  --type "Text" \\\r\n  --deposit "10000000intag" \\\r\n  --from my-wallet \\\r\n  --chain-id intagium-testnet-1\n'})}),"\n",(0,s.jsx)(n.h2,{id:"understanding-transaction-fees",children:"Understanding Transaction Fees"}),"\n",(0,s.jsx)(n.p,{children:"INTAGIUM uses a gas-based fee system similar to Ethereum:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Estimate gas for a transaction\r\nintagiumd tx bank send my-wallet recipient 1000000intag \\\r\n  --chain-id intagium-testnet-1 \\\r\n  --gas auto \\\r\n  --gas-adjustment 1.5 \\\r\n  --dry-run\r\n\r\n# Set specific gas and fees\r\nintagiumd tx bank send my-wallet recipient 1000000intag \\\r\n  --chain-id intagium-testnet-1 \\\r\n  --gas 200000 \\\r\n  --fees 10000intag\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling-and-debugging",children:"Error Handling and Debugging"}),"\n",(0,s.jsx)(n.h3,{id:"common-errors-and-solutions",children:"Common Errors and Solutions"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"account sequence mismatch"'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Query account info to get correct sequence\r\nintagiumd query auth account $(intagiumd keys show my-wallet -a)\r\n\r\n# Use --sequence flag if needed\r\nintagiumd tx bank send my-wallet recipient 1000000intag \\\r\n  --sequence 5 \\\r\n  --chain-id intagium-testnet-1\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"insufficient funds"'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check your balance\r\nintagiumd query bank balance $(intagiumd keys show my-wallet -a) intag\r\n\r\n# Request more tokens from faucet if on testnet\r\ncurl -X POST "https://faucet.intagium.com/request" \\\r\n  -H "Content-Type: application/json" \\\r\n  -d \'{"address": "\'$(intagiumd keys show my-wallet -a)\'", "amount": "10000000"}\'\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"invalid chain-id"'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Verify you're using the correct chain ID\r\nintagiumd config chain-id intagium-testnet-1\r\n\r\n# Or specify it in each command\r\nintagiumd tx bank send my-wallet recipient 1000000intag \\\r\n  --chain-id intagium-testnet-1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Never share your private keys or mnemonic phrases"}),"\n",(0,s.jsx)(n.li,{children:"Use hardware wallets for mainnet operations"}),"\n",(0,s.jsx)(n.li,{children:"Keep testnet and mainnet environments separate"}),"\n",(0,s.jsx)(n.li,{children:"Verify transaction details before signing"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"development",children:"Development"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Always test on testnet first"}),"\n",(0,s.jsx)(n.li,{children:"Use meaningful transaction memos for tracking"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper error handling"}),"\n",(0,s.jsx)(n.li,{children:"Monitor gas usage and optimize transactions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"address-management",children:"Address Management"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Take advantage of the dual address system"}),"\n",(0,s.jsx)(n.li,{children:"Use the format that's most convenient for your use case"}),"\n",(0,s.jsx)(n.li,{children:"Remember both formats point to the same account"}),"\n",(0,s.jsx)(n.li,{children:"Use address conversion utilities when needed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,s.jsx)(n.p,{children:"Congratulations! You've completed the Hello World tutorial and learned:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 How to create and manage INTAGIUM wallets"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 The dual address system and its benefits"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Basic token operations and transactions"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Web3 integration with familiar tools"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Module interactions and specialized features"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Error handling and debugging techniques"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"continue-your-journey",children:"Continue Your Journey"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/modules/overview",children:"Explore Modules"})})," - Dive deep into INTAGIUM's unique features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/api/overview",children:"API Documentation"})})," - Build applications with INTAGIUM APIs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/samples/overview",children:"Sample Applications"})})," - See real-world implementations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/architecture/overview",children:"Architecture Guide"})})," - Understand INTAGIUM's design"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"join-the-community",children:"Join the Community"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://discord.gg/intagium",children:"Discord"})," - Get help and share your projects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/amrae1/INTAGIUM",children:"GitHub"})," - Contribute to the codebase"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://twitter.com/intagium",children:"Twitter"})," - Stay updated with the latest news"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Happy building on INTAGIUM! \ud83d\ude80"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);